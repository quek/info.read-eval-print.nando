(eval-when (:compile-toplevel :load-toplevel :execute)
  (ql:quickload :info.read-eval-print.nando)
  (ql:quickload :hu.dwim.stefil))

(info.read-eval-print.series-ext:sdefpackage
 :info.read-eval-print.nando.test
 (:use :cl :anaphora :info.read-eval-print.nando)
 (:import-from :hu.dwim.stefil #:is #:deftest #:signals))

(in-package :info.read-eval-print.nando.test)

(hu.dwim.stefil:defsuite* (info.read-eval-print.nando.test
                           :in hu.dwim.stefil:root-suite))


(defclass foo ()
  ((a :initarg :a :accessor a)
   (b :initarg :b :accessor b)
   (c :initarg :c :accessor c :initform 0))
  (:metaclass persistent-class))

(deftest test-foo ()
  (with-connection ()
    (clear-strage)
    (let* ((x (create-instance 'foo :a 123 :b "こんにちは"))
           (_id (_id x))
           (loaded (load-object _id)))
      (is (= 123 (a loaded)))
      (is (string= "こんにちは" (b loaded))))))

(deftest test-foo-setf ()
  (with-connection ()
    (clear-strage)
    (let ((foo (make-instance 'foo :a 1 :b "a")))
      (setf (a foo) 100)
      (setf (b foo) "まみむめも♪")
      (save foo)
      (let ((loaded (load-object (_id foo))))
        (is (= 100 (a loaded)))
        (is (string= "まみむめも♪" (b loaded)))))
    (is (= 1 (collect-length (scan* 'foo))))))


(deftest test-where-= ()
  (with-connection ()
    (clear-strage)
    (collect-ignore (create-instance 'foo :a (scan-range :length 10)))
    (let ((x (collect-first (scan* 'foo :where '(= a 7)))))
      (is (= 7 (a x))))))

(deftest test-were-=-string ()
  (with-connection ()
    (clear-strage)
    (collect-ignore (create-instance 'foo :b (format nil "あい~a" (scan-range :length 10))))
    (let ((x (collect-first (scan* 'foo :where '(= b "あい7")))))
      (is (string= "あい7" (b x))))))

(deftest test-where-in ()
  (with-connection ()
    (clear-strage)
    (collect-ignore (create-instance 'foo :a (scan-range :length 10)))
    (is (= 4 (collect-length (scan* 'foo :where '(in a 2 3 7 9)))))
    (iterate ((x (scan* 'foo :where '(in a 2 3 7 9))))
      (is (member (a x) '(2 3 7 9))))))

(deftest test-where-> ()
  (with-connection ()
    (clear-strage)
    (collect-ignore (create-instance 'foo :a (scan-range :length 10)))
    (is (= 2 (collect-length (scan* 'foo :where '(> a 7)))))
    (iterate ((x (scan* 'foo :where '(> a 8))))
      (is (= (a x) 9)))))

(deftest test-where-/= ()
  (with-connection ()
    (clear-strage)
    (create-instance 'foo :a 10)
    (create-instance 'foo :a 5)
    (let ((foos (collect (scan* 'foo :where '(/= a 10)))))
      (is (= 1 (length foos)))
      (is (= 5 (a (car foos)))))))

(deftest test-where-and ()
  (with-connection ()
    (clear-strage)
    (create-instance 'foo :a 1 :b "あ")
    (create-instance 'foo :a 1 :b "い")
    (create-instance 'foo :a 2 :b "い")
    (let ((foos (collect (scan* 'foo :where '(and (= a 1) (= b "い"))))))
      (is (= 1 (length foos)))
      (is (= 1 (a (car foos))))
      (is (string= "い" (b (car foos)))))))

(deftest test-where-or ()
  (with-connection ()
    (clear-strage)
    (create-instance 'foo :a 1 :b "あ")
    (create-instance 'foo :a 2 :b "い")
    (create-instance 'foo :a 3 :b "う")
    (let ((foos (collect (scan* 'foo :where '(or (= a 1) (= b "い"))))))
      (is (= 2 (length foos)))
      (is (= 1 (a (car foos))))
      (is (string= "あ" (b (car foos))))
      (is (= 2 (a (cadr foos))))
      (is (string= "い" (b (cadr foos)))))))

(deftest test-where-and-or ()
  (with-connection ()
    (clear-strage)
    (create-instance 'foo :a 1 :b "あ" :c 10)
    (create-instance 'foo :a 1 :b "い" :c 20)
    (create-instance 'foo :a 1 :b "う" :c 30)
    (create-instance 'foo :a 2 :b "あ" :c 20)
    (let ((foos (collect (scan* 'foo :where '(and (= a 1) (or (= b "あ") (= c 20)))))))
      (is (= 2 (length foos)))
      (is (= 1 (a (car foos))))
      (is (string= "あ" (b (car foos))))
      (is (= 10 (c (car foos))))
      (is (= 1 (a (cadr foos))))
      (is (string= "い" (b (cadr foos))))
      (is (= 20 (c (cadr foos)))))))

(deftest test-where-or-and ()
  (with-connection ()
    (clear-strage)
    (create-instance 'foo :a 1 :b "あ" :c 10)
    (create-instance 'foo :a 2 :b "い" :c 20)
    (create-instance 'foo :a 3 :b "い" :c 30)
    (let ((foos (collect (scan* 'foo :where '(or (= a 1) (and (= b "い") (= c 20)))))))
      (is (= 2 (length foos)))
      (is (= 1 (a (car foos))))
      (is (string= "あ" (b (car foos))))
      (is (= 2 (a (cadr foos))))
      (is (string= "い" (b (cadr foos))))
      (is (= 20 (c (cadr foos)))))))

(deftest test-proxy ()
  (with-connection ()
    (clear-strage)
    (let ((foo (load-object (_id (create-instance 'foo :a (make-instance 'foo :a :inner))))))
      (is (eq :inner (a (a foo)))))))

(deftest test-update-proxy ()
  (with-connection ()
    (clear-strage)
    (let ((_id (_id (create-instance 'foo :a (make-instance 'foo :a :inner)))))
      (let* ((foo (load-object _id)))
        (setf (a (a foo)) :new-value)
        (save foo))
      (let ((foo (load-object _id)))
        (is (eq :new-value (a (a foo))))))))

(deftest test-skip-limit ()
  (with-connection ()
    (clear-strage)
    (collect-ignore (create-instance 'foo :a (scan-range :from 6 :upto 10)))
    (collect-ignore (create-instance 'foo :a (scan-range :from 1 :upto 5)))
    (is (= 3 (collect-length (scan* 'foo :skip 4 :limit 3 :sort 'a))))
    (iterate ((foo (scan* 'foo :skip 1 :limit 3 :sort 'a))
              (a (scan-range :from 2 :length 3)))
      (is (= a (a foo))))))

(deftest test-complex-sort ()
  (with-connection ()
    (clear-strage)
    (let ((bs (collect (scan-range :from 1 :upto 10))))
      (collect-ignore (create-instance 'foo :a 10.1 :b (scan bs)))
      (collect-ignore (create-instance 'foo :a 9.99 :b (scan bs)))
      (iterate ((foo (scan* 'foo :sort '(a b :desc)))
                (a (catenate (subseries (series 9.99) 0 10) (subseries (series 10.1) 0 10)))
                (b (scan '(10 9 8 7 6 5 4 3 2 1 10 9 8 7 6 5 4 3 2 1))))
        (is (= a (a foo)))
        (is (= b (b foo)))))))

(deftest test-transaction-commit ()
  (with-connection ()
    (clear-strage)
    (with-transaction ()
      (create-instance 'foo))
    (is (= 1 (collect-length (scan* 'foo))))))

(deftest test-transaction-rollback ()
  (with-connection ()
    (clear-strage)
    (ignore-errors (with-transaction ()
                     (create-instance 'foo)
                     (error "for rollback")))
    (is (= 0 (collect-length (scan* 'foo))))))

(deftest test-transaction-cuncurrent ()
  (with-connection ()
    (clear-strage)
    (create-instance 'foo)
    (let ((t1 (bt:make-thread
               (lambda ()
                 (with-connection ()
                   (with-transaction ()
                     (let ((foo (collect-first (scan* 'foo))))
                       (setf (a foo) 't1)
                       (save foo)
                       (sleep 0.2)))))))
          (t2 (bt:make-thread
               (lambda ()
                 (sleep 0.1)
                 (with-connection ()
                   (with-transaction ()
                     (let ((foo (collect-first (scan* 'foo))))
                       (signals concurrent-modify-error
                         (setf (b foo) 't2)
                         (save foo)))))))))
      (bt:join-thread t1)
      (bt:join-thread t2)
      (let ((foo (collect-first (scan* 'foo))))
        (is (eq 't1 (a foo)))))))

(deftest test-transaction-save-proxy ()
  (with-connection ()
    (clear-strage)
    (let ((id (with-transaction ()
                (_id (create-instance 'foo :a (make-instance 'foo :a :inner))))))
      (let ((foo (load-object id)))
        (is (eq :inner (a (a foo))))))))

(deftest test-transaction-update-proxy ()
  (with-connection ()
    (clear-strage)
    (let ((id (_id (create-instance 'foo :a (make-instance 'foo :a :inner)))))
      (with-transaction ()
        (let ((foo (load-object id)))
          (setf (a (a foo)) :new-value)
          (save foo)))
      (is (eq :new-value (a (a (load-object id))))))))

(define-condition test-commitable-error (error) ())
(deftest test-commitable-error ()
  (with-connection ()
    (clear-strage)
    (signals test-commitable-error
      (with-transaction ()
        (create-instance 'foo)
        (error 'test-commitable-error)))
    (is (zerop (collect-length (scan* 'foo))))
    (signals test-commitable-error
      (with-transaction (:commitable-errors (test-commitable-error))
        (create-instance 'foo)
        (error 'test-commitable-error)))
    (is (= 1 (collect-length (scan* 'foo))))))

(deftest test-for-update ()
  (with-connection ()
    (clear-strage)
    (create-instance 'foo :a 1)
    (let ((t1 (bt:make-thread
               (lambda ()
                 (with-connection ()
                   (with-transaction ()
                     (collect-first (scan* 'foo :for-updatet t))
                     (sleep 0.2))))))
          (t2 (bt:make-thread
               (lambda ()
                 (sleep 0.1)
                 (with-connection ()
                   (with-transaction ()
                     (signals concurrent-modify-error
                       (collect-first (scan* 'foo :for-update t)))))))))
      (bt:join-thread t1)
      (bt:join-thread t2))))


(info.read-eval-print.nando.test)
